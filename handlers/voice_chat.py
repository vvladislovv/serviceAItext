from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Messages.settingsmsg import new_message, update_message, maintain_typing_status
from services.logging import logs_bot
from services.openai_services import OpenAIService
from Messages.inlinebutton import tts_quality_menu, ai_menu_back
from database.settingsdata import get_state_ai, add_to_table
import os

router = Router(name=__name__)
openai_service = OpenAIService()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class TTSStates(StatesGroup):
    waiting_for_quality = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (HD –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ)
    waiting_for_voice = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
    waiting_for_text = State()     # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è

# –ì–æ–ª–æ—Å–∞ –¥–ª—è TTS
TTS_VOICES = {
    "alloy": "Alloy (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)",
    "echo": "Echo (–º—É–∂—Å–∫–æ–π)",
    "fable": "Fable (–±—Ä–∏—Ç–∞–Ω—Å–∫–∏–π)",
    "onyx": "Onyx (–≥–ª—É–±–æ–∫–∏–π)",
    "nova": "Nova (–∂–µ–Ω—Å–∫–∏–π)",
    "shimmer": "Shimmer (–º–µ–ª–æ–¥–∏—á–Ω—ã–π)"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏"
@router.callback_query(F.data == "TSSGenerat")
async def tts_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ TTS
        chat_id = call.from_user.id
        data_gpt = await get_state_ai(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tts –∏ tts_hd –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_tts_access = data_gpt.get("tts", 0) > 0
        has_tts_hd_access = data_gpt.get("tts-hd", 0) > 0

        if not (has_tts_access or has_tts_hd_access):
            await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = await tts_quality_menu(has_tts_access, has_tts_hd_access)
        await update_message(call.message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏:", keyboard)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        await state.set_state(TTSStates.waiting_for_quality)
        
    except Exception as e:
        await logs_bot("error", f"Error in tts_start: {str(e)}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
@router.callback_query(TTSStates.waiting_for_quality, F.data.startswith("tts_quality_"))
async def tts_select_quality(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        quality = "tts-hd" if call.data == "tts_quality_hd" else "tts"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É
        chat_id = call.from_user.id
        data_gpt = await get_state_ai(chat_id)
        
        if data_gpt.get(quality, 0) <= 0:
            await call.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {quality}", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(quality=quality)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
        keyboard = []
        row = []
        
        for voice_id, voice_name in TTS_VOICES.items():
            button = types.InlineKeyboardButton(
                text=voice_name,
                callback_data=f"tts_voice_{voice_id}"
            )
            
            row.append(button)
            if len(row) == 2:  # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                keyboard.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        if row:
            keyboard.append(row)
        
        keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—á–µ—Å—Ç–≤–∞", callback_data="TSSGenerat")
        ])
        
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ–ª–æ—Å–∞
        await update_message(
            call.message,
            f"–í—ã–±—Ä–∞–Ω–æ {'HD' if quality == 'tts-hd' else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'} –∫–∞—á–µ—Å—Ç–≤–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:",
            markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
        await state.set_state(TTSStates.waiting_for_voice)
        
    except Exception as e:
        await logs_bot("error", f"Error in tts_select_quality: {str(e)}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—á–µ—Å—Ç–≤–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
@router.callback_query(TTSStates.waiting_for_voice, F.data.startswith("tts_voice_"))
async def tts_select_voice(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
        await logs_bot("info", f"Voice selected: {call.data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–ª–æ—Å–∞ –∏–∑ callback_data –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        voice_id = call.data.replace("tts_voice_", "")
        await state.update_data(voice=voice_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
        data = await state.get_data()
        await logs_bot("info", f"State data after voice selection: {data}")
        
        quality = data.get("quality", "tts")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        keyboard = [
            [types.InlineKeyboardButton(text="üîä –ü—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'", callback_data="tts_example")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞", 
                callback_data=f"tts_quality_{'hd' if quality == 'tts-hd' else 'standard'}")
            ]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
        voice_name = TTS_VOICES.get(voice_id, voice_id)
        await update_message(
            call.message,
            f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: *{voice_name}*.\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å.\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            markup
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        await call.message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        await state.set_state(TTSStates.waiting_for_text)
        await logs_bot("info", f"State set to waiting_for_text")
        
    except Exception as e:
        await logs_bot("error", f"Error in tts_select_voice: {str(e)}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ—Å–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–∞
@router.callback_query(TTSStates.waiting_for_text, F.data == "tts_example")
async def tts_example(call: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        print(data)
        quality = data.get("quality", "tts")
        voice = data.get("voice", "alloy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É
        chat_id = call.from_user.id
        data_gpt = await get_state_ai(chat_id)
        
        if data_gpt.get(quality, 0) <= 0:
            await call.answer(f"–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è {quality}", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞...")
        success = await generate_voice_message(call.message, "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!", voice, quality)
        
        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if success:
            user_data = await get_state_ai(chat_id)
            if quality in user_data:
                user_data[quality] -= 1
                await logs_bot("info", f"Decreasing {quality} count to {user_data[quality]}")

            await add_to_table("StaticAIUsers", {
                "chatId": chat_id,
                "dataGpt": user_data
            })
        
    except Exception as e:
        await logs_bot("error", f"Error in tts_example: {str(e)}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(TTSStates.waiting_for_text)
async def tts_process_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await logs_bot("info", f"Processing text input: '{message.text[:30]}...'")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        print(data)
        await logs_bot("info", f"State data: {data}")
        
        quality = data.get("quality", "tts")
        voice = data.get("voice", "alloy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É
        chat_id = message.from_user.id
        data_gpt = await get_state_ai(chat_id)
        
        if data_gpt.get(quality, 0) <= 0:
            await new_message(message, f"–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è {quality}\\.")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
        if not message.text or len(message.text.strip()) == 0:
            await new_message(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è\\.")
            return
        
        if len(message.text) > 1000:
            await new_message(message, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π\\. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤\\.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        stop_typing = await maintain_typing_status(message)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await logs_bot("info", f"Generating voice message with text: '{message.text[:30]}...', voice: {voice}, quality: {quality}")
            success = await generate_voice_message(message, message.text, voice, quality)
            await logs_bot("info", f"Voice generation result: {success}")
            
            # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if success:
                user_data = await get_state_ai(chat_id)
                if quality in user_data:
                    user_data[quality] -= 1
                    await logs_bot("info", f"Decreasing {quality} count to {user_data[quality]}")

                await add_to_table("StaticAIUsers", {
                    "chatId": chat_id,
                    "dataGpt": user_data
                })
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                await logs_bot("info", "Clearing state after successful generation")
                await state.clear()
            else:
                # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                await logs_bot("warning", "Voice generation failed, keeping state")
                await new_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\\.")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await stop_typing()
        
    except Exception as e:
        await logs_bot("error", f"Error in tts_process_text: {str(e)}")
        await new_message(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\\.")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        await state.clear()

async def generate_voice_message(message: Message, text: str, voice: str, model: str = "tts"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        voice: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ–ª–æ—Å–∞
        model: –ú–æ–¥–µ–ª—å TTS (tts –∏–ª–∏ tts-hd)
        
    Returns:
        bool: True –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        await message.bot.send_chat_action(chat_id=message.chat.id, action="record_voice")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º API
        await logs_bot("info", f"Calling TTS API with text: '{text[:30]}...', voice: {voice}, model: {model}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ProxyAPI
        audio_path = await openai_service.text_to_speech(text, voice, model)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await logs_bot("info", f"TTS API returned path: {audio_path}")
        
        if not audio_path or not os.path.exists(audio_path):
            await logs_bot("error", f"Audio file not found: {audio_path}")
            await new_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.")
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            voice_file = FSInputFile(audio_path)
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            voice_name_raw = TTS_VOICES.get(voice, voice)
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –±–µ–∑ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            caption = f"üîä –ì–æ–ª–æ—Å: {voice_name_raw}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
            keyboard = await ai_menu_back()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer_voice(voice_file, caption=caption, parse_mode=None)
            await new_message(message, "–ì–æ—Ç–æ–≤–æ!\\ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\\", keyboard)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(audio_path)
            except Exception as e:
                await logs_bot("warning", f"Failed to remove temp file {audio_path}: {e}")
                
            return True  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            
        except Exception as send_error:
            await logs_bot("error", f"Error sending voice message: {send_error}")
            await new_message(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\\.")
            return False
        
    except Exception as e:
        await logs_bot("error", f"Error in generate_voice_message: {str(e)}")
        await new_message(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\\.")
        return False
