from services.logging import logs_bot
from Messages.settingsmsg import new_message, update_message, send_typing_action
from Messages.utils import download_voice_user
from database.settingsdata import (
    get_user_history,
    save_chat_history,
)
from typing import Tuple
from ai_services.openai_services import openai_service

last_messages = {}


async def AI_choice(message, model: str, image_url: str = None) -> Tuple[str, object]:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = None

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.from_user.id in last_messages:
        try:
            old_message, old_text = last_messages[message.from_user.id]
            await update_message(old_message, old_text, None)
        except Exception as e:
            await logs_bot("error", f"Error removing keyboard: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if image_url:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        analysis_prompt = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑."
        )
        response = await openai_service.analyze_image(image_url, analysis_prompt, model)
        msg_old = await new_message(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", None)
        return response, msg_old

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    model_display_name = model  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    processing_text = f"ü§ñ *{model_display_name}* –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
    msg_old = await new_message(message, processing_text, None)
    await send_typing_action(message, "typing")
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.voice:
            audio_file_path = await download_voice_user(message)
            message_text = await openai_service.speech_to_text(
                audio_file_path, "whisper-1"
            )
        elif message.text:
            message_text = message.text

        if not message_text:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", msg_old

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏
        history = await get_user_history(message.from_user.id, 5)

        if model == "stable_diffusion":
            pass
        elif model == "midjourney":
            pass
        elif model == "kandinsky":
            pass
        elif model == "leonardo":
            pass
        elif model == "flux":
            pass

        # NOT USE DALLY 3 AND 3 HD

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        response = await openai_service.chat_completion_with_context(
            message_text, history, model
        )

        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if response and isinstance(response, str):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
            if "{'role':" in response or '{"role":' in response:
                try:
                    # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                    content_start = response.find("'content': '")
                    if content_start == -1:
                        content_start = response.find('"content": "')

                    if content_start != -1:
                        content_start = response.find("'", content_start + 11)
                        if content_start == -1:
                            content_start = response.find('"', content_start + 11)

                        content_end = response.rfind("'}")
                        if content_end == -1:
                            content_end = response.rfind('"')

                        if content_start != -1 and content_end != -1:
                            response = response[content_start + 1 : content_end]
                            await logs_bot(
                                "debug", "Cleaned technical details from response"
                            )
                except Exception as e:
                    await logs_bot("warning", f"Failed to clean response: {e}")

        if response:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context_to_save = []
                if history and any(entry[0] for entry in history):
                    context_to_save.extend(entry[0] for entry in history)
                context_to_save.append(message_text)
                context_to_save.append(response)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                history_data = {
                    "user_id": message.from_user.id,
                    "message_text": message_text,
                    "response_text": response,
                    "model": model,
                    "context": context_to_save,
                }
                await save_chat_history(history_data)
                await logs_bot(
                    "debug", f"Saved context with {len(context_to_save)} messages"
                )

            except Exception as save_err:
                await logs_bot("error", f"Error saving chat history: {save_err}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_messages[message.from_user.id] = (msg_old, str(response))

            return response, msg_old

    except Exception as err:

        await logs_bot("error", f"Error in AI_choice: {err}")
        error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        return error_msg, msg_old

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.", msg_old
