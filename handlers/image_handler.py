from aiogram import Router, F, types
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Messages.settingsmsg import new_message, update_message
from Messages.inlinebutton import (
    backstep_menu_message,
    ai_menu_back,
    get_image_generation_keyboard,
)
from database.settingsdata import get_state_ai, get_table_data, add_to_table
from services.logging import logs_bot
from ai_services.openai_services import OpenAIService
from aiogram.types import FSInputFile

router = Router(name=__name__)


class GenerationState(StatesGroup):
    waiting_count = State()
    waiting_prompt = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_image_counts = {}


@router.callback_query(F.data == "ignore")
async def handle_ignore(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
    await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")


@router.callback_query(F.data == "Analize_image")
async def handle_analyze_image(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data_gpt = await get_state_ai(call.from_user.id)
        model = "gpt-4-vision-preview"
        remaining_requests = data_gpt.get(model, 0)

        if remaining_requests <= 0:
            await call.answer(
                "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", show_alert=True
            )
            return

        await update_message(
            call.message,
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∏ —è –ø–æ–¥—Ä–æ–±–Ω–æ –µ–≥–æ –æ–ø–∏—à—É.",
            await backstep_menu_message(),
        )
        await add_to_table("UsersAI", {"chatId": call.from_user.id, "typeGpt": model})
    except Exception as e:
        await logs_bot("error", f"Error in handle_analyze_image: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data == "Generation_image")
async def handle_generation_image(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_ai_list = await get_table_data("UsersAI")
        user_ai = next(
            (u for u in user_ai_list if u.get("chatId") == call.from_user.id), {}
        )
        model = user_ai.get("typeGpt", "dall-e3")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        if model not in ["dall-e3", "dall-e3-hd"]:
            model = "dall-e-3"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data_gpt = await get_state_ai(call.from_user.id)
        remaining_requests = data_gpt.get(model, 0)

        if remaining_requests <= 0:
            await call.answer(
                f"–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ {model}",
                show_alert=True,
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        keyboard = await get_image_generation_keyboard()
        await update_message(
            call.message,
            f"üé® –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–¥–µ–ª—å {model}):",
            keyboard,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å DALL-E
        await add_to_table("UsersAI", {"chatId": call.from_user.id, "typeGpt": model})

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_image_counts[call.from_user.id] = None
    except Exception as e:
        await logs_bot("error", f"Error in handle_generation_image: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data.startswith("gen_count_"))
async def handle_generation_count(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        count = call.data.split("_")[-1]
        current_count = user_image_counts.get(call.from_user.id)

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Ç–æ –∂–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if count == current_count:
            await call.answer("–≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ")
            return

        user_image_counts[call.from_user.id] = count

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        keyboard = await get_image_generation_keyboard(count)
        await update_message(
            call.message,
            f"üé® –í—ã–±—Ä–∞–Ω–æ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n–ù–∞–∂–º–∏—Ç–µ '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è",
            keyboard,
        )
    except Exception as e:
        await logs_bot("error", f"Error in handle_generation_count: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@router.callback_query(F.data == "enter_prompt")
async def handle_enter_prompt(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    try:
        count = user_image_counts.get(call.from_user.id)
        if not count:
            await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return

        await state.update_data(image_count=int(count))
        await state.set_state(GenerationState.waiting_prompt)

        await update_message(
            call.message,
            f"üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
            await backstep_menu_message(),
        )
    except Exception as e:
        await logs_bot("error", f"Error in handle_enter_prompt: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_image_generation(message: types.Message, prompt: str, count: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏ –∏–∑ –ë–î
        user_ai_list = await get_table_data("UsersAI")
        user_ai = next(
            (u for u in user_ai_list if u.get("chatId") == message.from_user.id), {}
        )
        model_type = user_ai.get("typeGpt", "dall-e-3")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        if model_type not in ["dall-e-3", "dall-e-3-hd"]:
            model_type = "dall-e-3"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        data_gpt = await get_state_ai(message.from_user.id)
        remaining_requests = data_gpt.get(model_type, 0)

        if remaining_requests <= 0:
            await new_message(
                message,
                f"‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–¥–µ–ª–∏ {model_type}. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
                None,
            )
            return False

        model_display_name = (
            "DALL-E 3 HD" if model_type == "dall-e-3-hd" else "DALL-E 3"
        )
        msg_old = await new_message(
            message,
            f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—è {model_display_name}...",
            None,
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        openai_service = OpenAIService()
        image_paths = await openai_service.generate_image(
            prompt, model_type, message.from_user.id, count
        )

        if image_paths and isinstance(image_paths, list):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            for path in image_paths:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
                    photo = FSInputFile(path)
                    await message.answer_photo(
                        photo=photo,
                        caption=f"‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_display_name}",
                    )
                except Exception as e:
                    await logs_bot("error", f"Error sending photo: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await update_message(
                msg_old,
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                await ai_menu_back(),
            )
            return True
        else:
            await update_message(msg_old, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", None)
            return False
    except Exception as e:
        await logs_bot("error", f"Error in handle_image_generation: {e}")
        return False


async def handle_image_analysis(message: types.Message, file_url: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        msg_old = await new_message(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", None)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
        user_ai = next(
            (
                u
                for u in await get_table_data("UsersAI")
                if u.get("chatId") == message.from_user.id
            ),
            {},
        )
        model_type = "gpt-4-vision-preview"  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        data_gpt = await get_state_ai(message.from_user.id)
        remaining_requests = data_gpt.get(model_type, 0)

        if remaining_requests <= 0:
            await update_message(
                msg_old,
                "‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                None,
            )
            return False

        openai_service = OpenAIService()
        response = await openai_service.analyze_image(
            file_url,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑.",
            model_type,
        )

        if response:
            await update_message(msg_old, response, await ai_menu_back())
            return True
        else:
            await update_message(
                msg_old, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", None
            )
            return False
    except Exception as e:
        await logs_bot("error", f"Error in handle_image_analysis: {e}")
        await update_message(
            msg_old, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", None
        )
        return False
