from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from services.logging import logs_bot
from aiogram.types import InlineKeyboardButton as TypesInlineKeyboardButton
from config.confpaypass import PayPassConfig


async def get_general_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [
            TypesInlineKeyboardButton(
                text="üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="Analize_image"
            ),
            TypesInlineKeyboardButton(
                text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="Generation_image"
            ),
        ],
        [
            TypesInlineKeyboardButton(
                text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Menu_pos_general"
            ),
        ],
        [
            TypesInlineKeyboardButton(text="üí∏ –ü–æ–¥–ø–∏—Å–∫–∞ Plus", callback_data="Pay"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_menu_pos_general() -> InlineKeyboardMarkup:
    keyboard = [
        [
            TypesInlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ë–æ—Ç–∞", callback_data="Restart"
            ),
            TypesInlineKeyboardButton(
                text="üîé –í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å", callback_data="Mode"
            ),
        ],
        [
            TypesInlineKeyboardButton(
                text="üñáÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="Profile"
            ),
            TypesInlineKeyboardButton(
                text="ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data="Help"
            ),
        ],
        [
            TypesInlineKeyboardButton(text="üí∏ –ü–æ–¥–ø–∏—Å–∫–∞ Plus", callback_data="Pay"),
        ],
        [
            TypesInlineKeyboardButton(
                text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Menu_general"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_image_generation_keyboard(
    selected_count: str = None,
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    Args:
        selected_count: –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"{i}Ô∏è‚É£ {'‚úÖ' if str(i) == selected_count else ''}",
                callback_data=f"gen_count_{i}",
            )
            for i in range(1, 5)
        ],
        [
            (
                InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="enter_prompt")
                if selected_count
                else InlineKeyboardButton(
                    text="‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="ignore"
                )
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏", callback_data="Mode"
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_main_keyboard_mode(
    current_model: str = None, user_id: int = None
) -> InlineKeyboardMarkup:
    # –ú–æ–¥–µ–ª–∏ –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    models = {
        "stable-diffusion": "Stable Diffusion",
        "midjourney": "Midjourney",
        "kandinsky": "Kandinsky",
        "leonardo": "Leonardo",
        "flux": "Flux",
        "dall-e-3": "DALL-E 3",
        "dall-e-3-hd": "DALL-E 3 HD",
    }

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database.settingsdata import get_table_data

    static_ai_users = await get_table_data("StaticAIUsers")
    user_limits = next(
        (user for user in static_ai_users if user.get("chatId") == user_id), None
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    keyboard = []
    row = []

    for model_id, model_name in models.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        remaining_requests = 0
        if user_limits and model_id in user_limits.get("dataGpt", {}):
            remaining_requests = user_limits["dataGpt"].get(model_id, 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
        button_text = f"{model_name} {'‚úÖ' if current_model == model_id else ''} ({remaining_requests})"
        button = TypesInlineKeyboardButton(text=button_text, callback_data=model_id)

        row.append(button)
        if len(row) == 2:  # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
    """keyboard.append([
        TypesInlineKeyboardButton(
            text=f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ {'‚úÖ' if current_model in ['tts_hd', 'tts'] else ''}", 
            callback_data="TSSGenerat"
        )
    ])
    """
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append(
        [
            TypesInlineKeyboardButton(
                text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="BackButton"
            )
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def ai_menu_back() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    """
    try:
        keyboard = [
            [
                TypesInlineKeyboardButton(
                    text="üîé –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞", callback_data="Mode_new"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error in ai_menu_back: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardMarkup(inline_keyboard=[])


async def backstep_menu_message() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    """
    try:
        keyboard = [
            [
                TypesInlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="BackButton"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error in backstep_menu_message: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardMarkup(inline_keyboard=[])


async def backstep_menu_message_pass() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    """
    try:
        keyboard = [
            [
                TypesInlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="BackButton"
                )
            ],
            [
                TypesInlineKeyboardButton(
                    text="‚≠êÔ∏è Telegram Stars", callback_data="PayStar"
                ),
                TypesInlineKeyboardButton(
                    text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="PayCard"
                ),
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error in backstep_menu_message: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardMarkup(inline_keyboard=[])


async def tts_quality_menu(has_tts=True, has_tts_hd=True):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ TTS"""
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
    row = []
    if has_tts:
        row.append(
            TypesInlineKeyboardButton(
                text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="tts_quality_standard"
            )
        )

    if has_tts_hd:
        row.append(
            TypesInlineKeyboardButton(
                text="HD –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="tts_quality_hd"
            )
        )

    if row:
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append(
        [TypesInlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def create_tts_example_keyboard(quality: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–æ–º –≥–æ–ª–æ—Å–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞

    Args:
        quality: str - —Ç–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ TTS ('tts' –∏–ª–∏ 'tts-hd')

    Returns:
        InlineKeyboardMarkup: —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text="üîä –ü–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="tts_example"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞",
                    callback_data="back_to_voice_selection",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error creating TTS example keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])


async def get_profile_keyboard(
    has_subscription=False, can_upgrade=False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        keyboard = []

        if has_subscription:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="RenewSubscription"
                    )
                ]
            )

            if can_upgrade:
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ Pro", callback_data="UpgradeToPro"
                        )
                    ]
                )
        else:
            keyboard.append(
                [InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="Pay")]
            )

        keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="BackButton")]
        )

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error creating profile keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])


async def get_pay_keyboard(
    has_subscription=False, can_upgrade=False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    try:
        keyboard = []

        if has_subscription:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="RenewSubscription"
                    )
                ]
            )

            if can_upgrade:
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            text="‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –¥–æ Pro", callback_data="UpgradeToPro"
                        )
                    ]
                )
        else:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text="‚≠êÔ∏è Telegram Stars", callback_data="PayStar"
                    ),
                    InlineKeyboardButton(
                        text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="PayCard"
                    ),
                ]
            )

        keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="BackButton")]
        )

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error creating payment keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])


async def get_payment_link_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    try:
        keyboard = [
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Pay")],
            [
                InlineKeyboardButton(
                    text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É üí≥", url="https://www.google.com"
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error creating payment link keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])


async def get_subscription_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    text=f"Base - {PayPassConfig.BASE_PRICE}‚≠êÔ∏è",
                    callback_data="SubscribeBase",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"Pro - {PayPassConfig.PRO_PRICE}‚≠êÔ∏è",
                    callback_data="SubscribePro",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="BackButton"
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    except Exception as e:
        await logs_bot("error", f"Error in get_subscription_type_keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])
